name: Unit Tests
run-name: ${{ github.actor }} Run Unit Tests Jobs âœ…

# Since Unit Tests are required to pass for each PR,
# we cannot disable them for documentation-only changes.
on:
    pull_request:
    push:
        branches:
            - main
            - 'release/**'
            - 'publisherwp/**'
    # Allow manually triggering the workflow.
    workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    submodule-update:
        name: Git Submodule Update
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Initialize Submodules
              run: git submodule init

            - name: Update Submodules
              run: git submodule

    unit-js:
        name: JavaScript
        needs: [submodule-update]
        runs-on: ubuntu-latest
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        strategy:
            fail-fast: false
            matrix:
                node: ['18.13.0']

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js and install dependencies
              uses: ./.github/setup-node
              with:
                  node-version: ${{ matrix.node }}

            - name: Npm build
              run: npm run build

            - name: Running the tests
              run: npm run test:js
#    test-php:
#        name: PHP
#        runs-on: ubuntu-latest
#        timeout-minutes: 20
#        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}
#
#        steps:
#            - uses: actions/checkout@v2
#
#            - name: Setup Node.js and install dependencies
#              uses: ./.github/setup-node
#
#            - name: Running unit tests
#              run: |
#                  set -o pipefail
#                  npm run test:unit:php | tee phpunit.log
#
#            # Verifies that PHPUnit actually runs in the first place. We want visibility
#            # into issues which can cause it to fail silently, so we check the output
#            # to verify that at least 500 tests have passed. This is an arbitrary
#            # number, but makes sure a drastic change doesn't happen without us noticing.
#            - name: Check number of passed tests
#              run: |
#                  # Note: relies on PHPUnit execution to fail on test failure.
#                  # Extract the number of executed tests from the log file.
#                  if ! num_tests=$(grep -Eo 'OK \([0-9]+ tests' phpunit.log) ; then
#                    if ! num_tests=$(grep -Eo 'Tests: [0-9]+, Assertions:' phpunit.log) ; then
#                      echo "PHPUnit failed or did not run. Check the PHPUnit output in the previous step to debug." && exit 1
#                    fi
#                  fi
#                  # Extract just the number of tests from the string.
#                  num_tests=$(echo "$num_tests" | grep -Eo '[0-9]+')
#                  if [ $num_tests -lt 500 ] ; then
#                    echo "Only $num_tests tests passed, which is much fewer than expected." && exit 1
#                  fi
#                  echo "$num_tests tests passed."
#
#    phpcs:
#        name: PHP coding standards
#        runs-on: ubuntu-latest
#        timeout-minutes: 20
#        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}
#
#        steps:
#            - name: Checkout repository
#              uses: actions/checkout@v3
#
#            - name: Set up PHP
#              uses: shivammathur/setup-php@v2
#              with:
#                  php-version: '7.4'
#                  coverage: none
#                  tools: cs2pr
#
#            # This date is used to ensure that the PHPCS cache is cleared at least once every week.
#            # http://man7.org/linux/man-pages/man1/date.1.html
#            - name: "Get last Monday's date"
#              id: get-date
#              run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> $GITHUB_OUTPUT
#
#            - name: Cache PHPCS scan cache
#              uses: actions/cache@v3
#              with:
#                  path: .cache/phpcs.json
#                  key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}
#
#            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
#            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
#            - name: Install Composer dependencies
#              uses: ramsey/composer-install@v2
#              with:
#                  custom-cache-suffix: ${{ steps.get-date.outputs.date }}
#
#            - name: Make Composer packages available globally
#              run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH
#
#            - name: Run PHPCS on all Publisher Core files
#              id: phpcs-publisher-core
#              run: phpcs --report-full --report-checkstyle=./.cache/phpcs-report.xml
#
#            - name: Show PHPCS results in PR
#              if: ${{ always() && steps.phpcs-publisher-core.outcome == 'failure' }}
#              run: cs2pr ./.cache/phpcs-report.xml
#
#            - name: Ensure version-controlled files are not modified during the tests
#              run: git diff --exit-code
