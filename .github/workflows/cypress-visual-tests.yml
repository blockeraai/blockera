name: Visual Regression Testing

on:
    pull_request:
        types: [opened, synchronize, ready_for_review]
    workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    detect_categories:
        name: Detecting Visual Test Categories
        runs-on: ubuntu-latest
        outputs:
            categories: ${{ steps.set_categories.outputs.categories }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Setup Node.js and install dependencies
              uses: ./.github/setup-node

            - name: Check if .pr-cypress.env.json exists
              id: check_env_file
              run: |
                  if [ -f ".pr-cypress.env.json" ]; then
                    echo "Found .pr-cypress.env.json"
                    echo "env_file=true" >> $GITHUB_ENV
                  else
                    echo "env_file=false" >> $GITHUB_ENV
                  fi

            - name: List test categories
              id: set_categories
              run: |
                  # Get all spec patterns from the .pr-cypress.env.json if it exists
                  categories=$(node .github/scripts/list-visual-test-categories.js)

                  if [ "${{ env.env_file }}" == "true" ] && [ -f ".pr-cypress.env.json" ]; then
                    # Check if the file exists and has the visual.specPattern property
                    has_spec_patterns=$(cat .pr-cypress.env.json | jq 'if type == "object" then has("visual") and (.visual | type == "object") and (.visual | has("specPattern")) else false end')
                    
                    if [ "$has_spec_patterns" == "true" ]; then
                      # Load spec patterns from .pr-cypress.env.json
                      spec_patterns=$(cat .pr-cypress.env.json | jq -r '.visual.specPattern[]')

                      # Extract category based on the first part of the filename (before the first dot) and remove ".visual.cy.js"
                      filtered_categories=$(echo "$spec_patterns" | \
                        sed -E 's|.*/([^/]+)\..*|\1|' | \
                        sed -E 's|^[^.]*\.||' | \
                        sed -E 's|\visual\.cy$||' | \
                        sort -u)

                      # Convert filtered categories to JSON array and output
                      filtered_categories_json=$(echo "$filtered_categories" | tr ' ' '\n' | jq -R -n '[inputs]' | jq -c '.')
                      echo "categories=$filtered_categories_json" >> $GITHUB_OUTPUT
                      echo "Filtered categories: $filtered_categories"
                    else
                      # If no visual.specPattern, use the original categories
                      categories_json=$(echo $categories | jq -c '.')
                      echo "categories=$categories_json" >> $GITHUB_OUTPUT
                      echo "Using default categories (no visual.specPattern found)"
                    fi
                  else
                    # If no env file or env_file is false, use the original categories
                    categories_json=$(echo $categories | jq -c '.')
                    echo "categories=$categories_json" >> $GITHUB_OUTPUT
                    echo "Using default categories (no .pr-cypress.env.json file)"
                  fi

            - name: Print categories output
              run: |
                  echo "Detected categories: ${{ steps.set_categories.outputs.categories }}"

    visual-test:
        name: Visual Testing
        needs: detect_categories
        runs-on: ubuntu-latest
        if: ${{ github.repository == 'blockeraai/blockera' || github.event_name == 'pull_request' }}
        strategy:
            fail-fast: false
            matrix:
                category: ${{ fromJson(needs.detect_categories.outputs.categories) }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup Node.js and install dependencies
              uses: ./.github/setup-node

            - name: Install Cypress
              run: npx cypress install

            - name: Cache Cypress binary
              uses: actions/cache@v3
              with:
                  path: ~/.cache/Cypress
                  key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      cypress-${{ runner.os }}-cypress-

            - name: Install Composer Packages
              run: composer install --no-dev -o --apcu-autoloader -a

            - name: Create required environment files
              run: |
                  # Set the base configuration file
                  WP_ENV_CONFIG=".github/wp-env-configs/base.json"

                  # Check if a specific configuration exists for the category
                  if [ -f ".github/wp-env-configs/${{ matrix.category }}.json" ]; then
                    WP_ENV_CONFIG=".github/wp-env-configs/${{ matrix.category }}.json"
                  fi

                  # Copy the selected configuration to .wp-env.json
                  cp "$WP_ENV_CONFIG" .wp-env.json
                  cat .wp-env.json

                  # Create .env file
                  touch .env
                  echo APP_MODE=production >> .env
                  echo DB=wp_tests >> .env
                  cat .env

            - name: Start WordPress Environment
              run: npm run env:start

            - name: Build wp-env app
              run: npm run build

            - name: Debug Matrix Category
              run: |
                  echo "Running category: ${{ matrix.category }}"

            - name: Run visual regression tests
              run: |
                  if [ "${{ matrix.category }}" != "general" ]; then
                    spec_pattern="packages/**/*.${{ matrix.category }}.visual.cy.js"
                  else
                    spec_pattern=$(find packages -type f -name "*.visual.cy.js" ! -name "*.*.visual.cy.js" | tr '\n' ',')
                    spec_pattern="${spec_pattern%,}" # Remove trailing comma
                  fi

                  # If the env file exists, filter spec patterns based on .pr-cypress.env.json
                  if [ "${{ env.env_file }}" == "true" ]; then
                    # Load categories from the .pr-cypress.env.json
                    categories_json=$(cat .pr-cypress.env.json)
                    spec_patterns=$(echo "$categories_json" | jq -r '.e2e.specPattern[]')

                    # Extract the first part of each spec pattern filename before the first dot and remove ".visual.cy.js"
                    filtered_categories=$(echo "$spec_patterns" | sed -E 's|.*/([^/]+)\..*|\1|' | sed -E 's|\.visual\.cy$||' | sort -u)

                    # Only run tests for filtered categories
                    echo "Filtered categories: $filtered_categories"

                    # Generate spec pattern based on filtered categories
                    for category in $filtered_categories; do
                      if [ "${{ matrix.category }}" == "$category" ]; then
                        spec_pattern="packages/**/*.${{ matrix.category }}.visual.cy.js"
                      fi
                    done
                  fi

                  npm run test:e2e -- --spec "$spec_pattern"

            - name: Stop WordPress Environment
              run: npm run env:stop

            # Check for new baseline files that need to be added to the repository
            - name: Check for new baseline files
              id: check_baseline
              run: |
                  # Check if baseline directory exists and has files
                  if [ -d "visual-screenshots/baseline" ]; then
                    # Count files in baseline directory
                    baseline_count=$(find visual-screenshots/baseline -type f | wc -l)
                    echo "Found $baseline_count files in visual-screenshots/baseline directory"
                    
                    # List all baseline files for debugging
                    echo "Baseline files:"
                    find visual-screenshots/baseline -type f | sort
                    
                    # If there are any files, this indicates new baseline files were generated
                    if [ "$baseline_count" -gt 0 ]; then
                      echo "New baseline files detected! These need to be added to the repository."
                      echo "baseline_files_detected=true" >> $GITHUB_OUTPUT
                      echo "baseline_count=$baseline_count" >> $GITHUB_OUTPUT
                    else
                      echo "No baseline files found."
                      echo "baseline_files_detected=false" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "Baseline directory does not exist."
                    echo "baseline_files_detected=false" >> $GITHUB_OUTPUT
                  fi

            # Fail the workflow if new baseline files are detected
            - name: Fail if new baseline files detected
              if: steps.check_baseline.outputs.baseline_files_detected == 'true'
              run: |
                  echo "‚ùå FAILURE: New baseline files detected in visual-screenshots/baseline directory!"
                  echo "This means there are visual tests that don't have baseline files in the repository."
                  echo "Please add the following baseline files to the repository:"
                  find visual-screenshots/baseline -type f | sort
                  echo ""
                  echo "The baseline files have been uploaded as artifacts for you to download and add manually."
                  exit 1

            # Upload new baseline files as artifacts for developers to add manually
            - name: Upload new baseline files as artifacts
              if: steps.check_baseline.outputs.baseline_files_detected == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.category }}-new-baseline-files
                  path: visual-screenshots/baseline/
                  retention-days: 7

            # Upload diff artifacts if tests fail
            - name: Upload diff artifacts
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.category }}-visual-test-diffs
                  path: |
                      visual-screenshots/diff
                      visual-screenshots/comparison
                  retention-days: 7
