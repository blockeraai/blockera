name: Code Lint

on:
    pull_request:
        types: [opened, synchronize, ready_for_review]

    workflow_dispatch:

jobs:
    shared:
        name: Shared Job
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Shared Setup Action
              uses: ./.github/shared-setup
              with:
                  private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    jslint:
        name: JavaScript coding standards
        needs: shared
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        strategy:
            fail-fast: false
            matrix:
                node: ['18.3.0']

        steps:
            - name: Running the lint:js
              run: npm run lint:js

    stylelint:
        name: CSS coding standards
        needs: shared
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        steps:
            - name: Running the lint:css
              run: npm run lint:css

    phpcs:
        name: PHP coding standards
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '7.4'
                  coverage: none
                  tools: cs2pr

            # ensure that the PHPCS cache is cleared at least once every week.
            # see: http://man7.org/linux/man-pages/man1/date.1.html
            - name: "Get last Monday's date"
              id: get-date
              run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> $GITHUB_OUTPUT

            - name: Cache PHPCS scan cache
              uses: actions/cache@v3
              with:
                  path: .cache/phpcs.json
                  key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@v2
              with:
                  custom-cache-suffix: ${{ steps.get-date.outputs.date }}

            - name: Make Composer packages available globally
              run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

            - name: Run PHPCS on all Publisher Core files
              id: phpcs-publisher-core
              run: |
                  pwd
                  mkdir -p .cache
                  phpcs --report-full --report-checkstyle=./.cache/phpcs-report.xml --standard=phpcs.xml

            - name: Show PHPCS results in PR
              if: ${{ always() && steps.phpcs-publisher-core.outcome == 'failure' }}
              run: cs2pr ./.cache/phpcs-report.xml

            - name: Ensure version-controlled files are not modified during the tests
              run: git diff --exit-code
