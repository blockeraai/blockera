name: Test PHP

on:
    pull_request:
        types: [opened, synchronize, ready_for_review]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    phpunit:
        name: Phpunit
        runs-on: ubuntu-latest
        if: github.event.pull_request.draft == false && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: root
                ports:
                    - 3306/tcp
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup PHP version
              uses: ./.github/setup-php

            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup Node
              uses: ./.github/setup-node

            # Set up the SSH key
            #            - name: Set up SSH key
            #              run: |
            #                  mkdir -p ~/.ssh
            #                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            #                  chmod 600 ~/.ssh/id_rsa
            #                  ssh-add ~/.ssh/id_rsa

            # Install Git and update submodules
            - name: Install Git and update submodules
              run: |
                  sudo apt-get update
                  sudo apt-get install git
                  cd ..
                  cd publisher-core/libs/storybook
                  git clone git@github.com:publisherwp/storybook.git
                  cd ..
                  cd ..

            - name: Running Build Script
              run: npm run build

            - name: Install WordPress Test Suite
              run: |
                  bash bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:${{ job.services.mysql.ports['3306'] }}

            - name: Get Composer Cache Directory
              id: composer-cache
              run: |
                  echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Setup Composer cache
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-composer-

            - name: Install composer
              run: composer install --prefer-dist --no-progress --no-suggest

            - name: Running PHPUnit Tests
              run: composer run-script test
